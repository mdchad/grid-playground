import Head from 'next/head';
import { useState } from 'react';
import { AnimatePresence, LayoutGroup, motion } from 'framer-motion';
import { tw } from 'twind';

const stylObject = {};

export default function Home() {
  const [column, setColumn] = useState([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
  const [gridCol, setGridCol] = useState('5');
  const [gridRow, setGridRow] = useState('2');
  const [gap, setGap] = useState('4');

  function onSetGridCol() {}

  function getGridCol(obj: any, type: string) {
    let a = {
      [obj + 'col']: `grid-cols-${obj}`,
      [obj + 'gap']: `gap-${obj}`,
      [obj + 'row']: `grid-rows-${obj}`,
    }[obj + type];

    return a;
  }

  const spring = {
    type: 'spring',
    bounce: 0.25,
    duration: 0.8,
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="w-full h-screen">
        <div className="flex w-2/3 mx-auto justify-between">
          <div className="p-4 mt-20 bg-gray-700 rounded-md">
            <div
              className={tw`h-full grid ${
                gridCol ? getGridCol(gridCol, 'col') : getGridCol('4', 'col')
              } ${gap ? getGridCol(gap, 'gap') : getGridCol('4', 'gap')}
               ${gridRow ? getGridCol(gridRow, 'row') : getGridCol('2', 'row')} 
              grid-flow-col
               bg-white rounded-md`}
            >
              <AnimatePresence initial={false}>
                {column.map((col) => {
                  return (
                    <motion.div
                      key={col}
                      layout
                      className="w-20 h-20 bg-red-300 rounded-md"
                      transition={spring}
                      initial={{ opacity: 0.5, scale: 0.8 }}
                      animate={{ opacity: 1, scale: 1 }}
                      exit={{ opacity: 0, scale: 0.8 }}
                    >
                      {col}
                    </motion.div>
                  );
                })}
              </AnimatePresence>
            </div>
          </div>
          <div className="p-4 mt-20 bg-gray-200 rounded-md">
            <div>
              <label
                htmlFor="column"
                className="block text-sm font-medium text-gray-700"
              >
                Column
              </label>
              <div className="mt-1">
                <input
                  type="number"
                  name="column"
                  id="column"
                  className="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  min={1}
                  max={10}
                  value={gridCol}
                  onChange={(e) => setGridCol(e.target.value)}
                />
              </div>
            </div>
            <div className="mt-4">
              <label
                htmlFor="column"
                className="block text-sm font-medium text-gray-700"
              >
                Gap
              </label>
              <div className="mt-1">
                <input
                  type="number"
                  name="column"
                  id="column"
                  className="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  min={1}
                  max={10}
                  value={gap}
                  onChange={(e) => setGap(e.target.value)}
                />
              </div>
            </div>
            <div className="mt-4">
              <label
                htmlFor="column"
                className="block text-sm font-medium text-gray-700"
              >
                Row
              </label>
              <div className="mt-1">
                <input
                  type="number"
                  name="column"
                  id="column"
                  className="block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  min={1}
                  max={10}
                  value={gridRow}
                  onChange={(e) => setGridRow(e.target.value)}
                />
              </div>
            </div>
            <div className="grid grid-cols-3 gap-2">
              <p className="text-sm mt-10">Add item</p>
              <button
                className="mt-4 p-2 bg-white rounded-lg shadow-md"
                onClick={() => setColumn((prev) => prev.concat(prev.length))}
              >
                +
              </button>
              <button
                className="mt-4 p-2 bg-white rounded-lg shadow-md"
                onClick={() => setColumn((prev) => prev.slice(0, -1))}
              >
                -
              </button>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}
